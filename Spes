convo

%%%% Convolution - Discrete Time Sequences
x=[1 234 5];
h=[-12 3-4];
nx=0:length(x)-
1;nh=0:length(h)-
1;figure(1)subplo
t(3,1,1)stem(nx,x
)
title('the input
signal')subplot(3,1,2)
stem(nh,h)
title('the
fliter')y=conv(x,h
)ny=0:length(y)-
1;subplot(3,1,3)st
em(ny,y)
title('theoutputsignal')

%%%Convolution – 2D signal (Image)
x1=imread('cat1.jpg');figure(
3)
imshow(x1)x2=rgb2gray(x1)
;[m
n]=size(x2)figure(2)subplot(
3,1,1)imshow(x2)
title('the input
image')f=[111;1-
81;111];
y=conv2(f,x2);
subplot(3,1,2)i
mshow(y)
title('Output image with shift and subtract
filter')f=[0 00; 0 1 0; 0 0 -1];
y=conv2(f,x2);
subplot(3,1,3)i
mshow(y)
title('Outputimagewithedgedetectionfilter')

ProgramforConvolution Operation
#include<stdio.h>
#include<math.h>
inty[20];inti,j;mai
n()
{
int
m=4;int
n=4;
intx[4]={1,2,3,4,0};
inth[4]={1,1,1,1,0};
for(i=0;i<=m+n-1;i++)
{
y[i]=0;
for(j=0;j<=i;j++)
y[i]+=x[j]*h[i-j];

}
for(i=0;i<=m+n-1;i++)
printf("%d\n",y[i]);


stability

clc;
clearall;
closeall;
% Given system%yn)=(3/8)y(n-1)+(2/3)y(n-2)+x(n)+(1/4)x(n-1)
num=[ 1 1⁄4];
z=roots(num);
disp('the zeros of the system are:');
disp(z)
den=[1 -3/8 -2/3];
p=roots(den);
disp('the poles of the system are:');
disp(p)
sys=tf(num,den,-1);
sys
figure(1)
subplot(3,1,1)
zplane(z,p)
h=impz(num,den);
n = 0 : length(h)-1;
disp('The impulse response of LTI system is');
disp(h(1:10))
subplot(3,1,2)
stem(n,h)
xlabel ('time index n');
ylabel ('Amplitude ');
title('impulse response of the system')
y=stepz(num,den);
n = 0 : length(h)-1;
disp('The step response of LTI system is');
disp(y(1:10))
subplot(3,1,3)
stem(n,y)
xlabel ('time index n');
ylabel ('Amplitude ');
title(‘step response of the system’)


spectral

clearallf0=50;T=1/
f0;N=8;
fs=N*f0;Ts=1/fs;
n=;
x=sin();figure
(1)subplot(2,1
,1)stem(n,x)
xlabel('sample
number')ylabel('amplitu
de')
title('sampledsinusoidf=50HzwithN=8')ff
x=fft(x,N);
display('the fft of the given signal')
display(ffx)

fx=fftshift(fft(x));
%%%Kis samplenumber offundamentalfrequency f0
%%%circularsymmetry:X(N-n)=-x(n):X(0)=-X(8);X(1)=-X(7);X(2)=-X(6);X(3)=-X(5);
%%%%X(4)=-X(4);X(5)=-X(3);X(6)=-X(2);X(7)=-
X(1);f1=(-N/2:1:(N/2)-1)*f0;
magnitude=abs(fx);
subplot(2,1,2)stem(
f1,magnitude)xlabe
l('frequency')ylabel
('amplitude')
title('doublesidedfrequencyspectrum')
%%%%%%%%%%

%%%%FFT spectrum for multiple frequency
signalclear
allf1=50;f2=150;f3=250;T=1/(gcd(gcd(f1,f2),f3));N=6
4;
t=linspace(0,T,100);
xt=;
n=0:N-1;Ts=T/N;
x=;

figure(1)subplot(2,
1,1)plot(t,xt)xlabel
('timeinsec')ylabel('
amplitude')
title('mixed frequency
signal')subplot(2,1,2)
stem(n,x)xlabel('sample
number')ylabel('amplitu
de')
title('sampledsignalN=64')
%fx=fft(x,N);
%%givenxseirestakenforT=20msec;Ts
=T/N;f=1/T;
fx=fftshift(fft(x,N));
%%%Kis samplenumber offundamentalfrequency f0
%%%circularsymmetry:X(N-n)=-x(n):X(0)=-X(8);X(1)=-X(7);X(2)=-X(6);X(3)=-X(5);
%%%%X(4)=-X(4);X(5)=-X(3);X(6)=-X(2);X(7)=-
X(1);f1=(-N/2:1:(N/2)-1)*f;
magnitude=abs(fx);
subplot(2,1,2)stem(
f1,magnitude)xlabe
l('frequency')ylabel
('amplitude')
title('doublesidedfrequencyspectrum')
%%%%%%%%%%


xilinx

Multiplexer
module mux(out,s0,s1,i0,i1,i2,i3);
input s0,s1,i0,i1,i2,i3;
output out;
wire ss0,ss1,y0,y1,y2,y3;
not(ss0,s0);
not (ss1,s1);
and (y0,ss0,ss1,i0);
and (y1,ss0,s1,i1);
and (y2,s0,ss1,i2);
and (y3,s0,s1,i3);
or (out,y0,y1,y2,y3);
endmodule
Up-Down counter
module up_down_counter ( out, up_down , clk , reset )
output [3:0] out;
input up_down, clk, reset;
reg [3:0] out;
always @(posedge clk)
if (reset)
begin
out <= 4'b0 ;
end else if (up_down) begin
out <= out + 1;
end else begin
out <= out - 1;
end
endmodule
Arithmetic Logic unit
module alu(a,b,sel,y)
input a,b;
input [2:0] sel;
output y;
reg y;
always @ (a or b or sel)
case (sel)
3’b000: y = a & b;
3’b001: y = a| b;
3’b010: y = a^b;
3’b011: y = a ~^ b;

3’b100: y = a+b;
3’b101: y = a-b;
3’b110: y = a*b;
3’b111: y = ~b;
endcase
endmodule
Multiplier and Accumulator Unit
module mac(out, ov, x, y, rst);
input[3:0]x,y;
input rst;
output reg[8:0]out;
output reg ov;
reg [8:0] temp;
always@ (rst,x,y)
if (rst)
begin
temp= 9’b000000000;
ov=1’b0;
out=9’b000000000;
end
else
begin
temp = (temp+(x*y));
out <= temp;
if (temp[8])
ov = 1’b1;
end
endmodule


PROGRAM FOR DC MOTOR:
#include<pic.h>
#define in1 RB0
#define in2 RB1
#define sw RB2
void main()
{
TRISB0=0;
TRISB1=0;
TRISB2=1;
While (1) {
if (sw==1) {
in1=1;
in2=0;
} else {
in1=in2=0;
}
}


PROGRAM FOR STEPPER MOTOR:
;1. the experiment use 4 phasic 4 bat stepper motor, the angle is 7.5
; 2. The stepper motor drive I/O is RA0-RA3
; hardware request:SW S1 6-8 ON, the other SW OFF, SW S15 set ON,
#include <pic.h> //include MCU head file
__CONFIG (0x1832);
//THE configure of MCU,watchdog OFF, electrify delay OPEN, power down check OFF,
//LOW power programme OFF, encrypt, 4M crystal HS surge.
char step1=9; //the first step
char step2=0x0c; //the second step
char step3=6; //the third step
char step4=3; //the fourth step
void delay(); //delay function declare
//**********************main function*************************
void main()
{
char loop; //circle variable declare
ADCON1=0x7; //set A PORT all general data PORT
TRISD=0X00; //set A PORT OUTPUT
for (loop=12;loop--;) //circle times of stepper motor circumrotate one time 360/(7.5*4)
{
PORTD=step1; //drive the first step
delay(); //delay
PORTD=step2; //drive the second step
delay();
PORTD=step3; //drive the third step
delay ();
PORTD=step4; //drive the fourth step
delay ();
}
while(1) //stop work
{
PORTD=0;
}
}
//**********************delay function***********************
void delay()
{
chari,j;
for (i=100;i--;)
{
for (j=255;j--;);
}
}


elevator


#ifndef SPI_H
#defineSPI_H
//------------------------------------------------------------------------------
#include "Soft_SPI_Pins.h"
//------------------------------------------------------------------------------
void SPI_init(void)
{
SCLK_dir = 0;
SDOUT_dir = 0;
SDIN_dir = 1;
CS0_dir = 0;
CS1_dir = 0;
}
//--------------------------TX: transmit data-----------------------------------
void SPI_write(char send)
{
for(int Tx = 0 ; Tx < 8 ; Tx++ )
{
SCLK = 0;

SDOUT = ( (send << Tx) & 0x80 ) ? 1 : 0; //MSB first.
SCLK = 1;
}
}
//--------------------------RX: recieve data------------------------------------
char SPI_read(void)
{
char data = 0;
for(int Rx = 0 ; Rx < 8 ; Rx++ )
{
SCLK = 0;
data += (SDIN << (7-Rx)); //MSB first.
SCLK = 1;
}
return data;
}
#endif
void MAX7219_init(char noChips)
{
SPI_init();
while(noChips)
MAX7219_config(--noChips);
}
//------------------------------------------------------------------------------
void MAX7219_config(char chip)
{
MAX7219_write(DECODE_MODE_REG,DISABLE_DECODE,chip);
MAX7219_write(INTESITY_REG,BRIGHTNESS,chip);
MAX7219_write(SCAN_LIMIT_REG,SCAN_ALL_DIGITS,chip);
MAX7219_write(SHUTDOWN_REG,NORMAL_OPERATION,chip);
MAX7219_write(DISPLAY_TEST_REG,DISABLE_TEST,chip);
}
//------------------------------------------------------------------------------
void MAX7219_write(char regName,char data,char chip)
{
CS0 = 0;
SPI_write(regName);
SPI_write(data);
while(chip--)
MAX7219_NoOperation(); //Used for daisy chained (Cascaded) arrangements
CS0 = 1;

}
//------------------------------------------------------------------------------
void MAX7219_displayText(char* text)
{
char chip = 0;
while(*text)
{
char row = (*text++) - 32;//(Text-32)...because the first 32 ASCII character codes are none
Printable (control chars)
for(int col = 0; col < 8; col++)
{
MAX7219_write( col, symbol[row][col], chip );
}
chip++;
}
}
//-----------Passes the data to the adjacent MAX7219 in the Daisy Chain---------
void MAX7219_NoOperation()
{
SPI_write(NO_OP_REG);
SPI_write(0x00); //Don't care (Can be any arbitrary value)
}
//-----------------------------------
#include <stdio.h>
#include <stdlib.h>
//------------------------------------------------------------------------------
#include "ascii_chars.h"
#include "MAX7219.h"
//------------------------------------------------------------------------------
int main(int argc, char** argv)
{
MAX7219_init(4); //Pass number of Chips as argument
while(1)
{
MAX7219_displayText("ABCD");
}
return (EXIT_SUCCESS);
}


temperature

/* LCD initialization */
#include<pic.h>
__CONFIG(0x3f72);
void delay();
voidlcd_cmd(unsigned char);
voidlcd_data(unsigned char);
voidWriteNumbersToLCD(unsigned int );
voidWriteStringToLCD(const char *);
voidADC_init(void);
voidlcd_init();
intadc_resol=0;
int temp=0;
#define RS RA1
#define EN RA3
#define RW RA2
#define write PORTD
void delay()
{
int i;
for(i = 0;i<4000;i++);
}
voidlcd_cmd(unsigned char ch)
{
RS = 0;
RW = 0;
EN = 1;
write = ch;
delay();
EN = 0;
}
voidlcd_data(unsigned char ch)
{
RS = 1;
RW = 0;
EN = 1;
write = ch;
delay();

EN = 0;
}
voidlcd_init()
{
lcd_cmd(0x38);
lcd_cmd(0x06);
lcd_cmd(0x0C);
lcd_cmd(0x01);
lcd_cmd(0x80);
}
voidADC_init(void)
{
TRISE0 = 1;
//Under Register ADCON0 = 0x01;
ADCS1 = 1; ADCS0 = 0;
CHS2 = 1; CHS1 = 0; CHS0 = 1;
ADON = 1;
//Under Register ADCON1 = 0x80;
ADFM = 1;
ADCS2 = 1;
PCFG3 = 1; PCFG2 = 1; PCFG1 = 1; PCFG0 = 0;
}
voidWriteNumbersToLCD(unsigned intnum)
{
intb,digit = 10;
while( digit != 0 )
{
b = num /digit;
lcd_data(b + 0x30);
num = num % digit;
digit = digit/10;
}
}

voidWriteStringToLCD(const char *s)
{
while(*s)

lcd_data(*s++); // print first character on LCD
}

void main()
{
TRISA = 0x00;
TRISE0 = 1;
TRISD = 0x00;
PORTD = 0x00;
PORTA = 0x00;
PORTE = 0x00;
lcd_init();
ADC_init();
lcd_cmd(0x80);
WriteStringToLCD(" TEMPERATURE ");
lcd_cmd(0xC8);
WriteStringToLCD("*C");
while(1)
{
ADGO = 1;
while( ADGO == 1 );
adc_resol = ( ADRESH<< 8 ) + ( ADRESL );
temp = (5.0 *adc_resol* 100.0)/1024;
lcd_cmd(0xC5);
WriteNumbersToLCD(temp);
ADGO = 0;
}
}
